openapi: "3.0.0"
info: 
  description: Openapi for arcadia test task
  title: Arcadia test task
  version: "0.1"
tags:
- name: "User"
  description: "User related endpoints"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "Task"
  description: "Tasks related endpoints"

components:
  schemas:
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }

    Task:
      type: object
      properties:
        id: { type: integer }
        title : { type: string }
        description: { type: string }
        dueDate: 
          type: string
          format: date
        type: { type: string } 
        status: 
          type: string
          enum: [Cancelled, Resolved, Active]
    
    NewTask:
      type: object
      properties:
        dueDate: { type: string, format: date}
        title: { type: string }
        description: { type: string }
        type: { type: string }
    
    MergeTask:
      type: object
      properties:
        dueDate: { type: string, format: date }
        title: { type: string }
        description: { type: string }
        type: { type: string }
        status: { type: string, enum: ['Cancelled', 'Active', 'Resolved'] }
    
    Dashboard:
      type: object
      properties:
        cancelled: { type: integer }
        active: { type: integer }
        resolved:  { type: integer }
    
    TaskChange:
      type: object
      properties:
        message: { type: string }
        when: { type: string, format: date }
  
  responses:
    UserResponse:
      description: Response containing info about requested user
      content:
        application/json:
          schema: { $ref: '#/components/schemas/User' }
    
    TasksResponse:
      description: Response containing array with info about requested tasks
      content:
        application/json:
          schema:
            type: array
            items: { $ref: '#/components/schemas/Task' }

    DashboardResponse:
      description: Response containing dashboard with count of tasks grouped by their status
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Dashboard' }
    
    HistoryResponse:
      description: Response containing history of task changes
      content:
        application/json:
          schema:
            type: array
            items: { $ref: '#/components/schemas/TaskChange' }
    
  requestBodies:
    CreateTaskRequest:
      description: request body for creating task
      content:
        application/json:
          schema: { $ref: '#/components/schemas/NewTask' }
    
    MergeTaskRequest:
      description: |
        Request body for updating task.
        If fields of tasks need to be deleted then they should filled with default values ("" for strings and "0001-01-01" for dueDate).
      content:
        application/json:
          schema: { $ref: '#/components/schemas/MergeTask' }
          
paths:
  /user:
    get:
      tags:
        - User
      summary: current user
      description: Get info about current user
      responses:
        200: { $ref: "#/components/responses/UserResponse" }
  
  /user/tasks:
    get:
      tags:
        - Task
      summary: tasks of current user
      description: Get info about tasks of current user
      parameters:
        - name: status
          description: This parameter showing tasks with which status should be requested
          in: query
          required: false
          schema:
            type: string
            enum: ["cancelled", "active", "resolved"]
      responses:
        200: { $ref: '#/components/responses/TasksResponse' }
    post:
      tags:
        - Task
      summary: Create new task
      description: creates new task for current user
      requestBody: { $ref: '#/components/requestBodies/CreateTaskRequest' }
      responses:
        201: { description: successfully created }
        400: { description: bad request }
  
  /user/tasks/{id}:
    delete:
      tags:
        - Task
      summary: Delete task
      description: Delete task by id
      parameters:
        - name: id
          description: id of required task
          in: path
          required: true
          schema:
            type: integer
      responses:
        200: { description: successfully merged }
        404: { description: task with specified id was not found }
        
    patch:
      tags:
        - Task
      summary: Update task
      description: Merge task with passed in request body parameters
      parameters:
        - name: id
          description: id of required task
          in: path
          required: true
          schema:
            type: integer
      responses:
        200: { description: successfully merged }
        403: { description: task not active }
        404: { description: task with specified id was not found }
      
  /user/tasks/dashboard/byStatus:
    get:
      tags:
        - Task
      summary: Task dashboard
      description: Get dashboard with count of tasks grouped by status
      responses:
        200: { $ref: "#/components/responses/DashboardResponse" }
  
  /users/tasks/history:
    get:
      tags:
        - Task
      summary: Task history of task changes
      description: Get history of task changesfro current user
      responses:
        200: { $ref: "#/components/responses/HistoryResponse" }